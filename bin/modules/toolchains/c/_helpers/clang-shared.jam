C.ToolchainHelperOnce gcc-shared ;

if ! $(TARGETINFO_LOCATE) {

rule C.clang.FDefines { return -D$(<) ; }
rule C.clang.FIncludes { return -I$(<) ; }
rule C.clang.FLibraryPaths { return -L$(<) ; }


rule C.clang._LinkPrebuiltLibraries {
	C.gcc-shared._LinkPrebuiltLibraries ;
}


actions response C.clang.Archive {
	$(C.AR:C) -static $(LIBFLAGS) -o $(<:C) -filelist @($(>:CJ=$(NEWLINE)))
}


actions response C.clang.Archive2 {
	$(C.AR:C) -static $(LIBFLAGS) -o $(<:C) -filelist @($(>:J=$(NEWLINE)))
}


actions C.clang.Link {
	$(C.LINK:C) $(LINKFLAGS) -o $(<[1]:C) -filelist ^^^($(>:J=$(NEWLINE))) $(NEEDLIBS:TC) $(LINKLIBS:TC)
}


actions updated response C.clang.CC {
	$(C.CC:C) -c $(MFLAGS) $(>:C)
}


actions updated response C.clang.C++ {
	$(C.C++:C) -c $(MFLAGS) $(>:C)
}


actions updated response C.clang.PCH {
	$(C.C++:C) -c $(MFLAGS) $(>:C)
}


} # TARGETINFO_LOCATE

