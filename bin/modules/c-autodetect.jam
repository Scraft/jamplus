IncludeModule c ;

CONFIG ?= release ;

VALID_CONFIGS ?= debug release releaseltcg ;

switch $(OS)
{
	case NT :
		VALID_PLATFORMS ?= win32 win64 ;

		PLATFORM ?= win32 ;

	case MACOSX :
		VALID_PLATFORMS ?= macosx iphone iphonesimulator ;

		PLATFORM ?= macosx ;
}

#if ! $(CONFIG) in * $(VALID_CONFIGS)
#{
#	Exit "* jam: CONFIG must be one of the following:" $(VALID_CONFIGS:J=$(SPACE)) ;
#}

#if ! $(PLATFORM) in * $(VALID_PLATFORMS)
#{
#	Exit "* jam: PLATFORM must be one of the following:" $(VALID_PLATFORMS:J=$(SPACE)) ;
#}

rule C.ToolChain THE_COMPILER : THE_PLATFORM : THE_CONFIG
{
	THE_COMPILER ?= $(COMPILER) ;
	THE_PLATFORM ?= $(PLATFORM) ;
	THE_CONFIG ?= $(CONFIG) ;

	if $(THE_COMPILER)
	{
		COMPILER = $(THE_COMPILER) ;
	}

	if $(NT)
	{
		if $(THE_PLATFORM) = * {
			IncludeModule c-compilers/c-visualc-autodetect ;
		} else {
			IncludeModule c-compilers/c-visualc-autodetect-$(THE_PLATFORM) ;
		}
		if [ C.AutoDetect ] {
			return ;
		}

		if $(THE_PLATFORM) = * {
			IncludeModule c-compilers/c-mingw-autodetect ;
		} else {
			IncludeModule c-compilers/c-mingw-autodetect-$(THE_PLATFORM) ;
		}
		if [ C.AutoDetect ] {
			return ;
		} else {
			Exit No supported build platform found on this computer. ;
		}
	}
	else if $(UNIX)
	{
		IncludeModule c-compilers/c-gcc ;
		if $(PLATFORM) != *  &&  $(CONFIG) != * {
			IncludeModule c-compilers/c-gcc-$(PLATFORM) ;
			IncludeModule c-compilers/c-gcc-$(PLATFORM)-$(CONFIG) ;
		}
	}
}

C.ToolChain $(COMPILER) : $(PLATFORM) : $(CONFIG) ;

########################################################################
########################################################################

rule ActiveProject PROJECT
{
	ACTIVE_PROJECT = $(PROJECT) ;
}


