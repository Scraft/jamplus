{
	COMPILER.$(PLATFORM) = gcc ;

	SUFEXE	?= "" ;
	SUFLIB	?= .a ;
	SUFMODULE ?= .so ;
	SUFOBJ	?= .o ;
	SUFSHAREDLIB ?= .so ;

	C.Flags CC	: * : -x c ;
	C.Flags C++	: * : -x c++ ;
	C.Flags M	: * : -x objective-c ;
	C.Flags MM	: * : -x objective-c++ ;

	PCHCCFLAGS = -x c-header ;
	PCHC++FLAGS = -x c++-header ;
	PCHMFLAGS = -x objective-c-header ;
	PCHMMFLAGS = -x objective-c++-header ;

	NOARSCAN = true ;
	NOARUPDATE = true ;

	switch $(OS)
	{
		case CYGWIN :
			Defines * : __cygwin__ ;
			C.CC		?= gcc ;
			C.C++		?= g++ ;
			JAMSHELL	?= sh -c ;
			C.RANLIB	?= "" ;
			SUFEXE		= .exe ;
	}
}

if ! $(TARGETINFO_LOCATE) {

#
# General defaults; a lot like UNIX
#

BINDIR		?= /usr/local/bin ;
LIBDIR		?= /usr/local/lib ;
STDHDRS		?= /usr/include ;
UNDEFFLAG	?= "-u _" ;

rule C.FDefines { return -D$(<) ; }
rule C.FIncludes { return -I$(<) ; }
rule C.FLibraryPaths { return -L$(<) ; }


actions updated together piecemeal C.Archive
{
	"$(C.AR)" $(LIBFLAGS) $(<) $(>)
}

actions C.Link
{
	"$(C.LINK)" $(LINKFLAGS) -o $(<[1]) $(UNDEFS) $(>) $(NEEDLIBS:T) $(LINKLIBS)
}

actions together C.Ranlib
{
	"$(C.RANLIB)" $(<)
}

#
# NOARUPDATE - can't update an archive
#

if $(NOARUPDATE)
{
	actions C.Archive
	{
	"$(C.AR)" $(LIBFLAGS) $(<) $(>)
	}
}

actions updated response C.CC
{
	"$(C.CC)" -c $(MFLAGS) $(>)
}

actions updated response C.C++
{
	"$(C.C++)" -c $(MFLAGS) $(>)
}

actions updated response C.PCH
{
	"$(C.C++)" -c $(MFLAGS) $(>)
}


rule C._ForceIncludeHelper
{
	C.AddFlags $(TARGET) : "-include $(INCLUDES)" : $(THE_CONFIG:E=*) : $(THE_PLATFORM:E=*) ;
}


rule C._RuntimeTypeHelper
{
	if ! $(TYPE)  ||  $(TYPE) = dynamic
	{
	}
	else if $(TYPE) = static
	{
	}
}

rule C._MultiCppCompile_PchFlags
{
	# if the source should create pch
	local _pch ;
	on $(_src) _pch = $(PCH) ;
	if $(_pch[4]) {
		local _pchName = @($(_pch[3]:LBS):G=$(grist)) ;
		newsrcs += $(_pchName) ;

		local _pchFilename = $(_pchName).gch ;
		PCHFLAGS.$(PLATFORM).$(CONFIG) on $(_pchFilename) += $($($(BUILD_EXT).PCHFLAGS)) ;

#				Depends $(_pchFilename) : $(_src) ;
	}
}

rule C._MultiCppCompile_SetupFlags
{
	if $(_pch)  &&  ! $(_nopch) {
		local _pchName = @($(_pch[3]:LBS):G=$(grist)) ;
		local _pchFilename = $(_pchName).gch ;

		# if the source should use pch
		if $(_pch[2]) {
			# mark that compilation will depend on it
			Includes $(_src) : $(_pchFilename) ;
		}
	}

	_flags += "-c -o \"$(_obj:T)\"" ;
}

rule C._MultiCppCompile_PchDeps
{
	if $(_pch1[3]) {
		local _pchName = @($(_pch[3]:LBS):G=$(grist)) ;
		local _pchFilename = $(_pchName).gch ;
		Depends $(objects) : $(_pchFilename) ;
	}
}

rule C._SharedLibraryFromObjects_ExportLib
{
#			BINDING on $(_tlib) = [ _retrieveOutputName $(TARGET) : SUFLIB ] ;
	BINDING on $(_tlib) = $(_t) ;
	MakeLocate $(_tlib) : $(outputPath) ;
	Depends $(TARGET) : $(_tlib) ;
	Depends $(_tlib) : $(_t) ;
	NotFile $(_tlib) ;		# Turn this off for export libraries.
	_linkTargets += $(_tlib) ;

#			LinkFlags $(TARGET) : -Wl,--out-implib,$(_tlib:T) ;
}

rule C._SharedLibraryFromObjects_LinkFlags
{
	if module in $(OPTIONS) {
		linkFlags += -bundle -undefined dynamic_lookup ;
	} else {
		local installName =
			[ C._retrieveVar INSTALL_NAME_PATH : $(TARGET) : $(CONFIG) : $(PLATFORM) ]
			[ C._retrieveVar INSTALL_NAME_PATH : * : $(CONFIG) : $(PLATFORM) ] ;
		if ! $(installName)
		{
			installName = $(_t:TD) ;
		}
		else
		{
			installName = $(installName[1]) ;
		}
		installName = $(_t:BSR=$(installName)) ;
		on $(TARGET) linkFlags += -dynamiclib -install_name $(installName) ;
	}
}

} # TARGETINFO_LOCATE

BUILD_EXTENSIONS = $(SUFOBJ) .res ;
C.AddBuildExtensions CC : .c .s : C.CC : $(SUFOBJ) "" : 1 : 1 ;
C.AddBuildExtensions C++ : .cc .cpp .cxx : C.C++ : $(SUFOBJ) "" : 1 : 1 ;
C.AddBuildExtensions PCH : .h : C.PCH : "" .gch : 0 : 0 ;
C.AddBuildExtensions M : .m : C.CC : $(SUFOBJ) "" : 1 : 1 ;
C.AddBuildExtensions MM : .mm : C.C++ : $(SUFOBJ) "" : 1 : 1 ;



