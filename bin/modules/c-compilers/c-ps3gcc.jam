# -----------------------------------------------------------------
# Setup what extensions/features this platform has.
# -----------------------------------------------------------------
{
	SUFEXE			= .elf ;
	SUFLIB			= .a ;
	SUFMODULE		= .so ;
	SUFOBJ			= .o ;
	SUFSHAREDLIB	= .so ;

	C.Flags CC	: * : -x c ;
	C.Flags C++	: * : -x c++ ;
	C.Flags M	: * : -x objective-c ;
	C.Flags MM	: * : -x objective-c++ ;

	PCHCCFLAGS		= -x c-header ;
	PCHC++FLAGS		= -x c++-header ;
	PCHMFLAGS		= -x objective-c-header ;
	PCHMMFLAGS		= -x objective-c++-header ;

	NOARSCAN		= true ;
	NOARUPDATE		= true ;
}

if ! $(TARGETINFO_LOCATE) {

# -----------------------------------------------------------------
# Rules for defining, including and setting up lib directories.
# -----------------------------------------------------------------

rule C.FDefines
{ 
	return -D$(<) ; 
}
rule C.FIncludes 
{ 
	return -I\"$(<)\" ; 
}
rule C.FLibraryPaths 
{ 
	return -L\"$(<)\" ; 
}

# -----------------------------------------------------------------
# Rules performing each stage of the build.
# -----------------------------------------------------------------

# Create an application (.elf) from a bunch of objects/libraries.
actions response screenoutput C.Link
{
	Echo @ C.Link patience...
	$(C.LINK:\\C) @@($(LINKFLAGS) $(>:C) $(NEEDLIBS:TC) --start-group $(LINKLIBS:T) --end-group -Wl,-Map=$(<[1]:CS=.map) -o $(<[1]:C))
}

# Create archive (.a) from a bunch of objects.	
actions response C.Archive
{
	IF EXIST $(<:C\\). ( DEL $(<:C\\) )
	$(C.AR:\\C) @@(-ruc $(LIBFLAGS) $(<:C) $(>:C))
}

# Optimize (index) a library (.a).
actions together response C.Ranlib
{
	$(C.RANLIB:\\C) @@($(<:C))
}

# Compile C files (.c) into object files (.o).
actions updated response C.CC
{
	FOR %%I IN ( $(>[2-]:CBS) ) DO ECHO %%I
	pushd $(<[0]:D\\C)
	$(C.CC:\\C) @@(-c $(MFLAGS) $(>:C))
	SET RET=%ERRORLEVEL%
	popd
	EXIT /B %RET%
}

# Compile C++ files (.cpp) into object files (.o).
actions updated response C.C++
{
	FOR %%I IN ( $(>[2-]:CBS) ) DO ECHO %%I
	pushd $(<[0]:D\\C)
	$(C.C++:\\C) @@(-c $(MFLAGS) $(>:C))
	SET RET=%ERRORLEVEL%
	popd
	EXIT /B %RET%
}

# Compile PCH header files (.h) into precompiled header files (.h.pch).
actions updated response C.PCH
{
	$(C.C++:\\C) @@(-c $(MFLAGS) $(>:C))
}

# -----------------------------------------------------------------

# Rule to force include a given file when compiling.
rule C._ForceIncludeHelper
{
	C.AddFlags $(TARGET) : "-include $(INCLUDES)" : $(THE_CONFIG:E=*) : $(THE_PLATFORM:E=*) ;
}

# -----------------------------------------------------------------

} # TARGETINFO_LOCATE

# -----------------------------------------------------------------

# Map Jam build configurations to VS configurations.
VSCONFIGMAP.debug		= Debug ;
VSCONFIGMAP.optibug		= Optibug ;
VSCONFIGMAP.artist		= Artist ;
VSCONFIGMAP.qa			= QA ;
VSCONFIGMAP.master		= Master ;

# -----------------------------------------------------------------

# Map build platform to VS platform.
VSPLATFORMMAP.ps3gcc	= "PS3-GCC" ;

# -----------------------------------------------------------------
