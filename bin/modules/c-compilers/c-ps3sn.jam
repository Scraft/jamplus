# -----------------------------------------------------------------
# Setup what extensions/features this platform has.
# -----------------------------------------------------------------
{
	SUFEXE			= .elf ;
	SUFLIB			= .a ;
	SUFMODULE		= .so ;
	SUFOBJ			= .o ;
	SUFSHAREDLIB	= .so ;

	C.Flags CC	: * : -Tc ;
	C.Flags C++	: * : -Tp ;

	NOARSCAN		= true ;
	NOARUPDATE		= true ;
}

if ! $(TARGETINFO_LOCATE) {

# -----------------------------------------------------------------
# Rules for defining, including and setting up lib directories.
# -----------------------------------------------------------------

rule C.FDefines 
{ 
	return -D$(<) ; 
}
# There is a bug in the SN response file parsing that means -I"." will fail, so fix this case!
rule C.FIncludes 
{ 
	if "$(<)" = "."
	{
		return -I. ; 
	}
	else
	{
		return -I\"$(<)\" ; 
	}
}
rule C.FLibraryPaths 
{ 
	return -L\"$(<)\" ; 
}

# -----------------------------------------------------------------
# Rules performing each stage of the build.
# -----------------------------------------------------------------

# Create an application (.elf) from a bunch of objects/libraries.
actions response screenoutput C.Link
{
	Echo @ C.Link patience...
	$(C.LINK:\\C) @@($(LINKFLAGS) $(>:C) $(NEEDLIBS:TC) --start-group $(LINKLIBS:T) --end-group -Wl,--Map=$(<[1]:CS=.map) -o $(<[1]:C))
}

# Create archive (.a) from a bunch of objects.	
actions response C.Archive
{
	IF EXIST $(<:C\\). ( DEL $(<:C\\) )
	$(C.AR:\\C) @@(-ruc $(LIBFLAGS) $(<:C) $(>:C))
}

# Optimize (index) a library (.a).
actions together response C.Ranlib
{
	$(C.RANLIB:\\C) @@($(<:C))
}

# Compile C files (.c) into object files (.o).
actions updated response C.CC
{
	$(C.C++:\\C) @@($(MFLAGS) -c $(>:C) -o $(<[1]:C))
}

# Compile C++ files (.cpp) into object files (.o).
actions updated response C.C++
{	
	$(C.C++:\\C) @@($(MFLAGS) -c $(>:C) -o $(<[1]:C))
}

# -----------------------------------------------------------------
# Copied from c-gcc as SN Jam stuff isn't using this module (yet?).
# -----------------------------------------------------------------

# Setup what ends up on the command line given a bunch of libraries.
rule C._LinkPrebuiltLibraries
{
	local lib ;
	for lib in $(gristedLibraries) {
		if ! $(lib:D) {
   			BINDING on $(lib) = lib$(lib:B) ;
			EXPAND_TEXT on $(lib) = -l$(lib:G=) ;
			NoCare $(lib) ;
   		}
	}
}

# Can fill this rule in if we need to add support for linking against a static vs dynamic runtime.
rule C._RuntimeTypeHelper
{
	if ! $(TYPE)  ||  $(TYPE) = dynamic
	{
	}
	else if $(TYPE) = static
	{
	}
}

# Helper rule to force compiler to include a file for us.
rule C._ForceIncludeHelper
{
	C.AddFlags $(TARGET) : "-include $(INCLUDES)" : $(THE_CONFIG:E=*) : $(THE_PLATFORM:E=*) ;
}

# -----------------------------------------------------------------

# Helper rule to handle precompiled headers, taken from the VC version.
rule C._MultiCppCompile_SetupFlags
{
	if $(postREFERENCEDIRECTORIES[1]) {
		_flags += $(postREFERENCEDIRECTORIES) ;
	}

	local forceIncludeHeader ;
	if $(_pch[2]) {
		forceIncludeHeader = $(_pch[2]:G=$(grist)|force) ;
		BINDING on $(forceIncludeHeader) = $(_pch[3]) ;
		SEARCH on $(forceIncludeHeader) = $(_hdrs) ;
		objectForceIncludes = $(forceIncludeHeader) $(objectForceIncludes) ;
	}

	if $(_pch[4]) {
		# add extra flags to enable pch creation
		local _pchFilename = $(_pch[3]:LBS).gch ;
		local _pchDiskFilename = [ FDirName $(LOCATE_TARGET) $(_pchFilename:BS) ] ;
		_flags += --create_pch=\"$(_pchDiskFilename:\\)\" -Xpch_override=1 ;
		# mark that it will be created by compilation through srcref
		_pchFilename = $(_pchFilename:G=$(grist)) ;
		BINDING on $(_pchFilename) = $(_pchFilename:BS) ;
		MakeLocate $(_pchFilename) : $(LOCATE_TARGET) ;
		Depends $(_pchFilename) : $(_src) ;
		Clean clean:$(TARGET) : $(_pchFilename) ;

	# if the source should use pch
	} else if $(_pch[2]) && ! $(_nopch) {
		# add extra flags to enable pch loading
		local _pchFilename = $(_pch[3]:LBS).gch ;
		local _pchDiskFilename = [ FDirName $(LOCATE_TARGET) $(_pchFilename:BS) ] ;
		_flags += --use_pch=\"$(_pchDiskFilename:\\)\" -Xpch_override=1 ;
		# mark that compilation will depend on it
		_pchFilename = $(_pchFilename:G=$(grist)) ;
		Includes $(_src) : $(_pchFilename) ;
	}

	if $(objectForceIncludes[1]) {
		SEARCH on $(objectForceIncludes) = $(_hdrs) ;
		_flags += "-include \"$(objectForceIncludes:G=)\"" ;
	}

	# bind flags, defines and includes to the target
	_flags += $(_postmflags) ;
}

# Helper rule to handle precompiled headers, taken from the VC version.
rule C._MultiCppCompile_PchDeps
{
	if $(_pch1[4]) {
		local _pchFilename = $(_pch1[3]:LBS).gch ;
		_pchFilename = $(_pchFilename:G=$(grist)) ;
		Depends $(objects) : $(_pchFilename) ;
		# add that pch as output
		objects += $(_pchFilename) ;
	}
}

# -----------------------------------------------------------------

} # TARGETINFO_LOCATE

# -----------------------------------------------------------------

# Setup build extensions, taken from GCC.
C.BUILD_EXTENSIONS = $(SUFOBJ) ;
C.AddBuildExtensions CC : .c .s : C.CC : $(SUFOBJ) "" : 1 1 0 : 1 ;
C.AddBuildExtensions C++ : .cc .cpp .cxx : C.C++ : $(SUFOBJ) "" : 1 0 1 : 1 ;
C.AddBuildExtensions M : .m : C.CC : $(SUFOBJ) "" : 1 1 0 : 1 ;
C.AddBuildExtensions MM : .mm : C.C++ : $(SUFOBJ) "" : 1 0 1 : 1 ;
C.AddBuildExtensions PCH : .h .pch : C.PCH : "" .gch ;

# -----------------------------------------------------------------

# Map Jam build configurations to VS configurations.
VSCONFIGMAP.debug	= Debug ;
VSCONFIGMAP.optibug	= optibug ;
VSCONFIGMAP.artist	= Artist ;
VSCONFIGMAP.qa		= QA ;
VSCONFIGMAP.final	= Final ;

# -----------------------------------------------------------------

# Map build platform to VS platform.
VSPLATFORMMAP.ps3sn	= "PS3-SN" ;

# -----------------------------------------------------------------
