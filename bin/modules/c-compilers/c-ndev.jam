# -----------------------------------------------------------------
# Setup what extensions/features this platform has.
# -----------------------------------------------------------------
{
	SUFEXE			= .elf ;
	SUFLIB			= .a ;
	SUFMODULE		= .dll ;
	SUFOBJ			= .o ;
	SUFRES			= .res ;
	SUFSHAREDLIB	= .dll ;

	C.Flags CC	: * : -lang c ;
	C.Flags C++	: * : -lang c++ ;
	C.Flags M	: * : -lang objc ;
	C.Flags MM	: * : -lang objc ;

	PCHCCFLAGS		= -lang c ;
	PCHC++FLAGS		= -lang c++ ;
	PCHMFLAGS		= -precompile ;
	PCHMMFLAGS		= -precompile ;

	NOARSCAN		= true ;
	NOARUPDATE		= true ;
}

# -----------------------------------------------------------------
# Override these GCC default rules to allow for spaces...
# -----------------------------------------------------------------

rule C.FDefines			{ return -D$(<) ; }
rule C.FIncludes		{ return -I\"$(<)\" ; }
rule C.FLibraryPaths	{ return -L\"$(<)\" ; }

if ! $(TARGETINFO_LOCATE) {

# -----------------------------------------------------------------
# Rules performing each stage of the build.
# -----------------------------------------------------------------

# Create an application (.elf) from a bunch of objects/libraries.
actions response C.Link
{
	$(C.LINK:\\C) @@(-application $(LINKFLAGS) $(>:C) $(NEEDLIBS:TC) $(LINKLIBS:T) -map $(<:CS=.map) -o $(<[1]:C))
}

# Create archive (.a) from a bunch of objects.	
actions response C.Archive
{
	$(C.AR:\\C) @@(-library $(LIBFLAGS) -proc gekko $(>:C) -o $(<:C))
}

# Optimize (index) a library (.a).
actions together C.Ranlib
{
	$(C.RANLIB:\\C) @@($(<:C))
}

# Compile C files (.c) into object files (.o).
actions updated response C.CC
{
	$(C.CC:\\C) @@(-c $(MFLAGS) $(>:C) -o $(<[0]:D\\C))
}

# Compile C++ files (.cpp) into object files (.o).
actions updated response C.C++
{
	FOR %%I IN ( $(>[2-]:CBS) ) DO ECHO %%I
	$(C.C++:\\C) @@(-c $(MFLAGS) $(>:C) -o $(<[0]:D\\C))
}

# Compile PCH header files (.h) into precompiled header files (.h.pch).
actions updated response C.PCH
{
	$(C.C++:\\C) @@(-c $(MFLAGS)) $(>:C)
}

actions response C.ASM
{
	FOR %%I IN ( $(>[2-]:CBS) ) DO ECHO @ C.ASM - %%I
	$(C.ASM:\\C) @@(-c $(MFLAGS) -proc gekko -gdwarf-2 $(>:C) -o $(<[0]:D\\C))
}

# -----------------------------------------------------------------

# Rule to force include a given file when compiling.
rule C._ForceIncludeHelper
{
	C.AddFlags $(TARGET) : "-include $(INCLUDES)" : $(THE_CONFIG:E=*) : $(THE_PLATFORM:E=*) ;
}

# Rule to enable/disable exceptions.
rule C._C++Exceptions
{
	if ! $(TYPE)  ||  $(TYPE) = false
	{	
		Exit Error \: C._C++Exceptions not implemented on Wii - but a request to turn off has been made ;
	}
	else if $(TYPE) = true
	{
		Exit Error \: C._C++Exceptions not implemented on Wii - but a request to turn on has been made ;
	}
}

# -----------------------------------------------------------------

# Defines that apply to all targets, in all configurations, for Wii platform.
C.Defines * : 			
	GEKKO 
	RVL_OS 
	EPPC 
	RVL_SDK 
	TRK_INTEGRATION 
	HOLLYWOOD_REV=1 
	BROADWAY_REV=1 
	IOP_REV=1 	 
: * : wii ;

# -----------------------------------------------------------------

# C/C++ Flags
C.CFlags * :
	-proc gekko
	-align powerpc 
: * : wii ;

C.C++Flags * :
	-proc gekko
	-align powerpc 
: * : wii ;

# -----------------------------------------------------------------

# Prebuilt libraries - this seems like a reasonable list of basic libraries required to build any real Wii project.
# This doesn't include os, gx, dvd, HomeButtonLib as projects will often want to link against the debug versions of these
# under certain circumstance (out of our control). Perhaps other libraries in this list will need simliar options, but this
# can at least be a starting point...
C.LinkDirectories * :
	$(NDEV_ROOT)/lib
	$(NDEV_ROOT)/RVL_SDK/RVL/lib
	$(CW_ROOT)PowerPC_EABI_Support/Runtime/Lib
	$(CW_ROOT)PowerPC_EABI_Support/MSL/MSL_C/PPC_EABI/Lib
	$(CW_ROOT)PowerPC_EABI_Support/MSL/MSL_C++/PPC_EABI/Lib
	$(CW_ROOT)PowerPC_EABI_Support/MSL/MSL_C/PPC_EABI/Lib
	$(CW_ROOT)PowerPC_EABI_Support/MetroTRK
	;

C.LinkPrebuiltLibraries	* :			
	NdevExi2A.a
	ai.a
	ax.a
	axart.a						# not used
	axfx.a
	base.a
	db.a						# not used
	dsp.a
	euart.a
	exi.a
	fs.a
	ipc.a
	mem.a
	mtx.a
	mix.a
	nand.a
	kpad.a
	wpad.a
	wud.a						# not used
	bte.a
	odenotstub.a				# not used
	pad.a
	sc.a
	seq.a						# not used
	si.a
	syn.a						# not used
	usb.a
	vi.a
	wpad.a						# not used
	tpl.a
	arc.a
	wenc.a
	esp.a
	cx.a
	runtime.ppceabi.h.a
	msl_c.ppceabi.bare.h.a
	msl_c++.ppceabi.bare.h.a	# not used
	fdlibm.ppceabi.h.a			# not used
	TRK_Hollywood_Revolution.a	
: * : wii ;

C.LinkPrebuiltLibraries	* :	
	osD.a
	gxD.a
	dvdD.a
: debug : wii ;

C.LinkPrebuiltLibraries	* :	
	os.a
	gx.a
	dvd.a
: release final : wii ;

# -----------------------------------------------------------------

} # TARGETINFO_LOCATE

# -----------------------------------------------------------------

# Map Jam build configurations to VS configurations.
VSCONFIGMAP.debug	= Debug ;
VSCONFIGMAP.optibug	= Optibug ;
VSCONFIGMAP.artist	= Artist ;
VSCONFIGMAP.qa		= QA ;
VSCONFIGMAP.master	= Master ;

# -----------------------------------------------------------------

# Map build platform to VS platform.
VSPLATFORMMAP.wii	= "Wii" ;

# -----------------------------------------------------------------
