actions C.Link {
	"$(C.LINK)" $(LINKFLAGS) -o $(<[1]:C) $(>:C) $(NEEDLIBS:TC) $(LINKLIBS:TC)
}


rule C.MacOSX_SDK TARGET : SDK_PLATFORM : SDK_VERSION : MACOSX_VERSION_MIN {
	if ! ( $(PLATFORM) in macosx32 macosx64 macosxppc ) { return ; }

	SDK_PLATFORM ?= $(PLATFORM) ;

	if $(SDK_PLATFORM) in macosx32 macosx64 macosxppc {
		SDK_PLATFORM = macosx ;
	}

	local CC ;
	local C++ ;
	local LINK ;
	local OLD_TARGET = $(C.ACTIVE_TARGET) ;
	TARGET = [ ActiveTarget $(TARGET) ] ;
	local developerRoot ;
	local isysroot ;
	local flags ;
	local defaultversionmin ;
	switch $(SDK_PLATFORM) {
		case macosx :
			developerRoot = /Developer/SDKs ;
			SDK_VERSION ?= 10.6 ;
			switch $(SDK_VERSION) {
				case 10.4 :
					CC	= gcc-4.0 ;
					C++	= g++-4.0 ;
					LINK	= g++-4.0 ;
					isysroot = $(developerRoot)/MacOSX10.4u.sdk ;
					defaultversionmin = 10.4 ;
					XCODE_SDKROOT = macosx10.4 ;

				case 10.4u :
					CC	= gcc-4.0 ;
					C++	= g++-4.0 ;
					LINK	= g++-4.0 ;
					isysroot = $(developerRoot)/MacOSX10.4u.sdk ;
					defaultversionmin = 10.4 ;
					XCODE_SDKROOT = macosx10.4 ;

				case 10.5 :
					CC	= gcc ;
					C++	= g++ ;
					LINK	= g++ ;
					isysroot = $(developerRoot)/MacOSX10.5.sdk ;
					defaultversionmin = 10.5 ;
					XCODE_SDKROOT = macosx10.5 ;

				case 10.6 :
					CC	= gcc ;
					C++	= g++ ;
					LINK	= g++ ;
					isysroot = $(developerRoot)/MacOSX10.6.sdk ;
					defaultversionmin = 10.6 ;
					XCODE_SDKROOT = macosx10.6 ;

				case 10.7 :
					CC	= gcc ;
					C++	= g++ ;
					LINK	= g++ ;
					isysroot = $(developerRoot)/MacOSX10.7.sdk ;
					defaultversionmin = 10.7 ;
					XCODE_SDKROOT = macosx10.7 ;

				case * :		Exit "* MacOSX_SDK: Unsupported version $(SDK_VERSION) for SDK platform $(SDK_PLATFORM)." ;
			}
			SDK_VERSION_MIN ?= $(defaultversionmin) ;
			flags += -mmacosx-version-min=$(MACOSX_VERSION_MIN) ;
			developerRoot = $(isysroot) ;
	}

	C.CC on $(C.COMPILER_SUITE_SYMBOL) = $(CC) ;
	C.C++ on $(C.COMPILER_SUITE_SYMBOL) = $(C++) ;
	C.LINK on $(C.COMPILER_SUITE_SYMBOL) = $(LINK) ;
	C.RANLIB on $(C.COMPILER_SUITE_SYMBOL) = ;

	ISYSROOT on $(C.ACTIVE_TOOLCHAIN_*) = $(isysroot) ;	

	flags += -fvisibility=hidden -gdwarf-2 ;

	C.Flags * : CC	: -isysroot $(isysroot) $(flags) ;
	C.Flags * : C++	: -isysroot $(isysroot) $(flags) ;
	C.Flags * : M	: -isysroot $(isysroot) $(flags) -fobjc-abi-version=2 -fobjc-legacy-dispatch  ;
	C.Flags * : MM	: -isysroot $(isysroot) $(flags) -fobjc-abi-version=2 -fobjc-legacy-dispatch ; 
	C.LinkFlags * : -isysroot $(isysroot) $(flags) ;

	if $(TARGETINFO_LOCATE) {
		Contents += "Projects[ [[$(TARGET)]] ].XCODE_SDKROOT[ [[$(PLATFORM)]] ][ [[$(CONFIG)]] ] = [[$(XCODE_SDKROOT)]]

" ;
	}

	ActiveTarget $(OLD_TARGET) ;
}


rule C.gcc._ApplicationFromObjects_LinkFlags {
	if bundle in $(OPTIONS) {
		local outputName = [ C._retrieveOutputName ] ;
		MakeLocate $(_linkTargets) : $(outputPath)/$(outputName).app/Contents/MacOS ;
	}
}


rule C.gcc._ApplicationFromObjects_PostBuild {
	if bundle in $(OPTIONS) {
		local outputName = [ C._retrieveOutputName ] ;
		local bundlePath = $(outputPath)/$(outputName).app ;
		BUNDLE_PATH on $(C.ACTIVE_TOOLCHAIN_TARGET) = $(bundlePath) ;

		local pkginfo = @(PkgInfo:G=$(grist)) ;
		MakeLocate $(pkginfo) : $(bundlePath)/Contents ;
		local contents = APPL???? ;
		CONTENTS on $(pkginfo) = $(contents) ;
		WriteFile $(pkginfo) ;
		UseCommandLine $(pkginfo) : $(contents) ;
		Depends $(TARGET) : $(pkginfo) ;
		Clean clean:$(TARGET) : $(pkginfo) ;
		
		local infoplistcontents = $(INFO_PLIST:Z=$(C.ACTIVE_TOOLCHAIN_TARGET)) ;
		if $(infoplistcontents) {
			infoplistcontents += "</dict>
</plist>
" ;
			infoplistcontents = $(infoplistcontents:J="") ;

			local infoplist = @(Info.plist:G=$(C.ACTIVE_TOOLCHAIN_TARGET_GRIST)) ;
			MakeLocate $(infoplist) : $(bundlePath)/Contents ;
			CONTENTS on $(infoplist) = $(infoplistcontents) ;
			WriteFile $(infoplist) ;
			
			UseCommandLine $(infoplist) : $(infoplistcontents) ;
			Depends $(C.ACTIVE_TOOLCHAIN_TARGET) : $(infoplist) ;
			Clean $(C.ACTIVE_TOOLCHAIN_CLEAN_TARGET) : $(infoplist) ;
		}
		
	}
}


rule C.gcc._SharedLibraryFromObjects_LinkFlags {
	if module in $(OPTIONS) {
		linkFlags += -bundle -undefined dynamic_lookup -fPIC ;
	} else {
		local installName =
			$(INSTALL_NAME_PATH:Z=$(C.ACTIVE_TOOLCHAIN_TARGET))
			$(INSTALL_NAME_PATH:Z=$(C.ACTIVE_TOOLCHAIN_*))
		;
		if ! $(installName) {
			installName = $(_t:TD) ;
		} else {
			installName = $(installName[1]) ;
		}
		local outputName = [ C._retrieveOutputName : $(_t:S) ] ;
		installName = $(outputName:BSR=$(installName)) ;
		linkFlags += -dynamiclib -fPIC -install_name $(installName) ;
	}
}


if ! $(TARGETINFO_LOCATE) {

rule C._BundleInfoString KEY {
	INFO_PLIST on $(C.ACTIVE_TOOLCHAIN_TARGET) += "$(TAB)<key>$(KEY)</key>$(NEWLINE)$(TAB)<string>$(VALUE)</string>$(NEWLINE)" ;
}

rule C.BundleInfo TARGET : TYPE : VALUE {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	INFO_PLIST on $(C.ACTIVE_TOOLCHAIN_TARGET) ?= "<?xml version="1.0" encoding=\"UTF-8\"?>
<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">
<plist version=\"1.0\">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>English</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleSignature</key>
	<string>????</string>
	<key>CSResourcesFileMapped</key>
	<true/>
	<key>LSRequiresCarbon</key>
	<true/>
" ;
	switch $(TYPE:L) {
		case info :				C._BundleInfoString CFBundleGetInfoString ;
		case iconfile :			C._BundleInfoString CFBundleIconFile ;
		case longversion :		C._BundleInfoString CFBundleLongVersionString ;
		case bundlename :		C._BundleInfoString CFBundleName ;
		case shortversion :		C._BundleInfoString CFShortVersionString ;
		case bundleversion :	C._BundleInfoString CFBundleVersion ;
		case copyright :		C._BundleInfoString NSHumanReadableCopyright ;
	}
}


rule C.FrameworkDirectories TARGET : FRAMEWORKDIRS {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	C.Flags CC	: $(TARGET)  : "-F$(FRAMEWORKDIRS)" ;
	C.Flags C++	: $(TARGET)  : "-F$(FRAMEWORKDIRS)" ;
	C.Flags M	: $(TARGET)  : "-F$(FRAMEWORKDIRS)" ;
	C.Flags MM	: $(TARGET)  : "-F$(FRAMEWORKDIRS)" ;
	C.LinkFlags $(TARGET) : "-F$(FRAMEWORKDIRS)" ;
}

rule C.LinkFrameworks TARGET : FRAMEWORKS {
	TARGET = [ ActiveTarget $(TARGET) ] ;
	C.LinkFlags $(TARGET) : "-framework $(FRAMEWORKS)" ;
}

} else {

rule C.BundleInfo {
}

rule C.LinkFrameworks {
}

}
