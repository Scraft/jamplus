VISUAL_STUDIO_FORCE_VERSION = 10.0 ;

vs_versions.10.0 = vs2010 ;
vs_versions.9.0 = vs2008 ;
vs_versions.8.0 = vs2005 ;
vs_versions.7.1 = vs2003 ;
vs_versions.7.0 = vs2002 ;
vs_versions.6.0 = vc6 ;

rule FindVisualStudioHelper VERSION {
	local MSVCNT ;
	local MSVCNT_BIN_PATH ;
	local MSVCBIN ;
	local MSSDK ;
	local MSSDK_STDHDRS ;
	local MSSDK_LINKDIRECTORIES ;

	local compiler ;

	switch $(VERSION) {
		case 10.0 :
			local key = HKEY_CURRENT_USER SOFTWARE Microsoft VisualStudio $(VERSION)_Config InstallDir ;
			MSVCNT ?= [ W32_GETREG $(key) ] ;

			VS100COMNTOOLS = $(VS100COMNTOOLS:J=" ") ;
			if ! $(MSVCNT) && $(VS100COMNTOOLS) {
				MSVCNT = $(VS100COMNTOOLS) ;
			}
			if $(MSVCNT) {
				MSVCNT = @(..\\..\\vc:R=$(MSVCNT)) ;
				MSVCNT_BIN_PATH = @(../Common7/IDE:R=$(MSVCNT)) ;
				compiler = vs2010 ;
			}

		case 9.0 :
			local key = HKEY_LOCAL_MACHINE SOFTWARE Microsoft VisualStudio $(VERSION) InstallDir ;
			MSVCNT ?= [ W32_GETREG $(key) ] ;
			VS90COMNTOOLS = $(VS90COMNTOOLS:J=" ") ;
			if ! $(MSVCNT) && $(VS90COMNTOOLS) {
				MSVCNT = $(VS90COMNTOOLS) ;
			}
			if $(MSVCNT) {
				MSVCNT = @(..\\..\\vc:R=$(MSVCNT)) ;
				MSVCNT_BIN_PATH = @(../Common7/IDE:R=$(MSVCNT)) ;
				compiler = vs2008 ;
			}

		case 8.0 :
			local key = HKEY_LOCAL_MACHINE SOFTWARE Microsoft VisualStudio $(VERSION) InstallDir ;
			MSVCNT ?= [ W32_GETREG $(key) ] ;
			if ! $(MSVCNT) && $(VS80COMNTOOLS) {
				MSVCNT = $(VS80COMNTOOLS) ;
			}
			if $(MSVCNT) {
				MSVCNT = @(..\\..\\VC:R=$(MSVCNT)) ;
				MSVCNT_BIN_PATH = @($(MSVCNT)/../Common7/IDE:R=) ;
				compiler = vs2005 ;
			}

		case 7.1 :
			local key = HKEY_LOCAL_MACHINE SOFTWARE Microsoft VisualStudio $(VERSION) InstallDir ;
			MSVCNT ?= [ W32_GETREG $(key) ] ;
			if ! $(MSVCNT) && $(VS71COMNTOOLS) {
				MSVCNT = $(VS71COMNTOOLS) ;
			}
			if $(MSVCNT) {
				MSVCNT = @(..\\..\\vc7:R=$(MSVCNT)) ;
				MSVCNT_BIN_PATH = $(MSVCNT)/../Common7/IDE ;
				compiler = vs2003 ;
			}

		case 7.0 :
			local key = HKEY_LOCAL_MACHINE SOFTWARE Microsoft
				VisualStudio $(VERSION) InstallDir ;
			MSVCNT ?= [ W32_GETREG $(key) ] ;
			if ! $(MSVCNT) && $(VS70COMNTOOLS) {
				MSVCNT = $(VS70COMNTOOLS) ;
			}
			if $(MSVCNT) {
				MSVCNT = $(MSVCNT)\\..\\..\\vc7 ;
				MSVCNT = @(..\\..\\vc7:R=$(MSVCNT)) ;
				compiler = vs2002 ;
			}

		case 6.0 :
		    local key = HKEY_LOCAL_MACHINE SOFTWARE Microsoft DevStudio $(VERSION) Products "Microsoft Visual C++" ProductDir ;
		    MSVCNT ?= [ W32_GETREG $(key) ] ;
			MSVCNT_BIN_PATH = "$(MSVCNT)/../Common/MSDev98/Bin" ;
			compiler = vc6 ;
	}

	C.COMPILER_SUITE = vc ;
	C.COMPILER_SUITE_SYMBOL = !c.$(C.ACTIVE_TOOLCHAIN).info! ;

	local SUFOBJ = .obj ;
	SUFEXE on $(C.COMPILER_SUITE_SYMBOL) = .exe ;
	SUFLIB on $(C.COMPILER_SUITE_SYMBOL) = .lib ;
	SUFLINKLIBS on $(C.COMPILER_SUITE_SYMBOL) = .lib ;
	SUFMODULE on $(C.COMPILER_SUITE_SYMBOL) = .dll ;
	SUFOBJ on $(C.COMPILER_SUITE_SYMBOL) = $(SUFOBJ) ;
	SUFSHAREDLIB on $(C.COMPILER_SUITE_SYMBOL) = .dll ;
	SUFRES on $(C.COMPILER_SUITE_SYMBOL) = .res ;

	NOARSCAN on $(C.COMPILER_SUITE_SYMBOL) = true ;
	NOARUPDATE on $(C.COMPILER_SUITE_SYMBOL) = true ;

	if $(C.PLATFORM) != *  &&  $(CONFIG) != * {
		IncludeModule c-compilers/$(PLATFORM)-vc ;
	}

	C.$(C.PLATFORM).vc.AutoDetect $(compiler) ;

	MSVCNT on $(C.COMPILER_SUITE_SYMBOL) = $(MSVCNT) ;
	MSVCNT_BIN_PATH on $(C.COMPILER_SUITE_SYMBOL) = $(MSVCNT_BIN_PATH) ;
	MSVCBIN on $(C.COMPILER_SUITE_SYMBOL) = $(MSVCBIN) ;
	MSSDK on $(C.COMPILER_SUITE_SYMBOL) = $(MSSDK) ;
	MSSDK_STDHDRS on $(C.COMPILER_SUITE_SYMBOL) = $(MSSDK_STDHDRS) ;
	MSSDK_LINKDIRECTORIES on $(C.COMPILER_SUITE_SYMBOL) = $(MSSDK_LINKDIRECTORIES) ;

	C.BUILD_EXTENSIONS on $(C.COMPILER_SUITE_SYMBOL) = $(SUFOBJ) .res ;
	C.AddBuildExtensions $(C.COMPILER_SUITE_SYMBOL) : CC : .c .s : C.vc.CC : $(SUFOBJ) "" : 1 1 0 : 1 ;
	C.AddBuildExtensions $(C.COMPILER_SUITE_SYMBOL) : C++ : .cc .cpp .cxx : C.vc.C++ : $(SUFOBJ) "" : 1 0 1 : 1 ;

	TOOLCHAIN_COMPILER_KEYS on $(C.COMPILER_SUITE_SYMBOL) += MSVCNT ;
	
	return $(compiler) ;
}


rule FindVisualStudio VERSION {
	local compiler = $(vs_versions.$(VERSION)) ;
	local C.COMPILER_SUITE_SYMBOL = !c.$(C.ACTIVE_TOOLCHAIN).info! ;
	local msvcnt ;
	on $(C.COMPILER_SUITE_SYMBOL) msvcnt = $(MSVCNT) ;
	if ! $(msvcnt) {
		compiler = [ FindVisualStudioHelper $(VERSION) ] ;
	}

	return $(compiler) ;
}


rule C.AutoDetect THE_COMPILER {
	THE_COMPILER ?= $(C.COMPILER) ;

	# Do we need to attempt to detect the compiler?
	if ! $(THE_COMPILER)  ||  $(THE_COMPILER) = * {
		for ver in $(VISUAL_STUDIO_FORCE_VERSION) 10.0 9.0 8.0 7.1 7.0 6.0 {
			C.COMPILER = [ FindVisualStudio $(ver) ] ;
			if $(C.COMPILER) {
				break ;
			}
		}
		if ! $(C.COMPILER) {
			return ;
		}
	} else if $(C.COMPILER) in vc6 vs2003 vs2005 vs2008 vs2010 {
		switch $(C.COMPILER)
		{
			case vc6 :
				C.COMPILER = [ FindVisualStudio 6.0 ] ;
			case vs2003 :
				C.COMPILER = [ FindVisualStudio 7.1 ] ;
				C.COMPILER ?= [ FindVisualStudio 7.0 ] ;
			case vs2005 :
				C.COMPILER = [ FindVisualStudio 8.0 ] ;
			case vs2008 :
				C.COMPILER = [ FindVisualStudio 9.0 ] ;
			case vs2010 :
				C.COMPILER = [ FindVisualStudio 10.0 ] ;
		}
	}

	IncludeModule c-compilers/c-vc ;
#	if $(PLATFORM) != *  &&  $(CONFIG) != * {
#		IncludeModule c-compilers/$(PLATFORM)-vc-$(CONFIG) ;
#	}

	C.COMPILER_SUITE = vc ;
	C.COMPILER_SUITE_SYMBOL = !c.$(C.ACTIVE_TOOLCHAIN).info! ;

	return $(C.COMPILER) ;
}



