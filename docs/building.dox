/*! \page building Bootstrapping/Building

\section building_overview Overview

JamPlus comes with some simple makefiles to bootstrap the initial build of the JamPlus executable.  A good portion of the makefile contents in <tt>Makefile.Common</tt> are shared between the Visual C++ NMake-based build and the GCC-based make build.

Binaries are built into a platform specific directory under the <tt>bin/</tt> directory, such as <tt>bin/win32/</tt> or <tt>bin/macosx32/</tt>.  All associated scripts and optional Lua binaries are also within this platform directory.  In doing this, multiple JamPlus platform binaries can be deployed within the same directory tree, making it easy to check into your source control system.

In order to build a fully working JamPlus directory, certain Lua binaries are required.  By setting the environment variable <tt>LUA_BIN</tt> to the directory containing the appropriate LuaPlus binaries, the build processes described below will automatically populate the JamPlus bin/ directory with the Lua binaries.



\section building_visualc Building for Visual C++

The Visual C++ build uses Visual Studio's Link Time Code Generation support to create a highly optimized executable.

In order to build JamPlus using the Visual C++ compiler, do the following:

\code
    cd src
    jmake
\endcode

<tt>jmake</tt> selects the most recent Visual Studio version available and uses that compiler to build the Jam executable.  When finished, the Jam executable will have been built as <tt>bin/win32/jam.exe</tt>

To clean the Visual C++ build, run:

\code
    cd src
    clean
\endcode

Visual Studio 2010, 2012, and 2013 solutions are maintained for easy debugging of Jam.  Open <tt>src/jam.VS201?.sln</tt> to build within the appropriate IDE.  Note: The Release build of the Jam executable built via the IDE is nowhere near as fast as the command-line generated Link Time Code Generated version.





\section building_macosx Building for Mac OS X

In order to build JamPlus on Mac OS X, do the following:

\code
    cd src
    make macosx32
\endcode

When finished, the Jam executable will have been built as <tt>bin/macosx32/jam</tt>.

Alternatively, an Xcode project for debugging Jam is maintained.  Open <tt>src/jam.xcodeproj</tt> to build within Xcode.  Please note that the Release build does not currently work.  Build a Release build using the makefile instructions above.





\section building_macosx Building for Linux

In order to build JamPlus on Linux, do the following:

\code
    cd src
    make linux32
\endcode

When finished, the Jam executable will have been built as <tt>bin/linux32/jam</tt>.



\section build_luaplus Building and Copying the LuaPlus Binaries

The JamPlus Git repository has LuaPlus as a submodule residing at <tt>src/luaplus/</tt>.  To clone or update the repository, run the following command at the root of the JamPlus tree:

\code
    git submodule update --init
\endcode

Change directories into <tt>src/luaplus/</tt>.

\code
    cd src
    cd luaplus
\endcode

Build LuaPlus by running:

\code
    # On Windows:
    ..\..\bin\win32\jam.exe LUA_VERSION=lua52-luaplus

    # On Linux:
    ../../bin/linux32/jam LUA_VERSION=lua52-luaplus

    # On Mac:
    ../../bin/macosx32/jam LUA_VERSION=lua52-luaplus
\endcode

When finished a <tt>.build/bin.lua51-luaplus/bin.lua52-luaplus.COMPILER.PLATFORM/</tt> directory will have been created.  Set the <tt>LUA_BIN</tt> environment variable to point to the directory.

\code
    # On Windows:
    set LUA_BIN=d:/jamplus/src/luaplus/.build/bin.lua52-luaplus.COMPILER.PLATFORM

    # On Linux:
    export LUA_BIN=~/jamplus/src/luaplus/.build/bin.lua52-luaplus.COMPILER.PLATFORM

    # On Mac:
    export LUA_BIN=~/jamplus/src/luaplus/.build/bin.lua52-luaplus.COMPILER.PLATFORM
\endcode

Change directories back to the <tt>jamplus/src/</tt> directory.

\code
    cd ..
\endcode

Run the appropriate <tt>jmake</tt>/<tt>make</tt> command again, and the LuaPlus binaries will be copied to the appropriate <tt>jamplus/bin/</tt> directory.
*/
