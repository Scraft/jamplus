/*! \page changelog Changelog

\section version0_3_rc2 Changes since version 0.3-rc1

- Building: Make jmake.sh executable.
- Bootstrapping: Force make invocations to specify a platform.
- JamToWorkspace: Fix from Lucas Meijer for handling ActiveProject specified targets with LinkLibraries.
- Fix an issue with embedded response files where it would complain if the command line exceeded 10240 characters.  Found by Lucas Meijer.
- Jambase: Add support to BatchCompileGroupSize to handle the ActiveProject rule.
- Jambase: In the Library rule, the dependency chain was broken for the noexportlib option.
- Jambase: CRuntimeType only worked for the * target.  Now it works for project targets, too.
- Bootstrapping: Set the CRuntimeType for the jam and libjam targets specifically.
- -= bug fixes.
- Fix a compilation issue on Mac with INT_MAX.
- Jambase: Fix the shared library support on Mac OS X.



\section version0_3 Version 0.3

<h3>New features for 0.3:</h3>

- Mac OS X build mostly works, but there is still a lot of work to build in the necessary rules to create a full Carbon or Cocoa app.



<h3>Bootstrapping/Building:</h3>

- jmake.cmd now detects VS2005 or VS2008, so starting vsvars32.bat is not needed.
- Makefile and Makefile.Windows now both include Makefile.Common, so they only define compiler and flags, and Makefile.Common defines what to do.
- jmake.cmd now checks for different versions of MSVC using both registry values and envvars.
- Added clean.cmd, used to clean bootstrapping results.
- Bootstrapped Jam builds as a releaseltcg configuration.



<h3>Documentation:</h3>

- Fill me in.




<h3>Jam Executable:</h3>

- Until it can be fixed, turned off a broken optimization when scanning paths.  On a no-op build with Noel's test, this saved 1/10 of a second.
- In the Subst rule, handle the case where the replacement string isn't specified and instead, treat it as an empty string.
- New patch from the mailing list at http://maillist.perforce.com/pipermail/jamming/2003-December/002252.html as suggested by Andreas Fredriksson.  #ifdef'ed as OPT_CIRCULAR_GENERATED_HEADER_FIX.  As I recall from past experiments with this patch, it can slow down the dependency check considerably.  In my tests today, I noticed no discernable slowdown, and it fixes the Bug #10, too.
- Add OPT_ACTIONS_WAIT_FIX using the patch found at http://maillist.perforce.com/pipermail/jamming/2003-December/002252.html.
- glob.c: On Windows machines, glob files in a case insensitive manner.
- Allow nested response file generation; that is, when expanding a variable to generate one response file, other response files may be embedded.
- Apply the HDRFILTER to cached header lists, too.
- Preserve the header list before the HDRFILTER touches it.
- -= bug fixes.




<h3>Jambase:</h3>

- Default the build configuration to release instead of debug.
- Fix to change the colon following a drive letter to a -- for the output directory in MultiCppCompile when outputastree is turned on.
- Fixed SharedLibraryFromObjects from causing a circular dependency: targetname -> targetname.lib -> targetname.
- The Library rule has a new nodefaults option.  Currently, its only use is to avoid adding /SUBSYSTEM to the link flags.
- The Library rule has a new nomanifest option to turn off the embedding of a manifest.
- The Library rule has a new noexportlib option that turns off the writing of the export library.
- For a library, append the SUFLIB instead of using the :S modifier.  This fixes library names that have periods in them.
- ObjectCFlags and ObjectC++Flags now only apply their flags to files of the appropriate types.
- Fix a bug in CFlags and ObjectCFlags where flags weren't being applied properly.
- Add NoWorkspace rule.
- For Visual Studio 2005 and 2008, use an incremental manifest embedding technique for Debug builds.  For Release builds, use the simple mt.exe -outputresource technique.
- Handle proper manifest embedding in DLLs.
- After checking the OutputPostfix for the current target, check the * target for a global override.
- Account for relative paths specified for the LinkDirectories rule.
- New rule DefFile.  Adds support for using .def files for DLL exports.
- When compiling resources, pick up defines, flags, and include directories from the .rc file, the pseudotarget parent, and the * global target.
- Resource Compiler: If any of the defines, flags, or include directories change from the last Jam run, rebuild the resource.
- Rules RcDefines, RcFlags, and RcIncludeDirectories accept either 2 or 3 parameters.  If 2 parameters are specified, the options are applied to TARGET.  If 3 parameters are specified, the options are applied to RESOURCE_NAME.
- SourceGroup can accept an optional TARGET, using the active target if TARGET isn't specified.
- ** Possibly breaking change... let me know if it is an issue. ***  JamToWorkspace was architected to work when the SubDir root was preloaded with an absolute path.  With the Jambase rework within JamPlus, it expected the same thing.  This blows up when JamToWorkspace is not used and when a build is run from the root Jamfile.  This change makes a generated SubDir root an absolute path.  It works in all cases I've tried.
- Make Application and Library pay attention to changes in the link flags, libraries, or objects.  When a change is made from the last build, the executable or library is relinked (or rearchived).
- When detecting MSVC versions, Jambase.jam now tries envvars, not just the registry.  Seems that some installations don't have appropriate keys in the registry, and some don't have the envvars, so this should work for both.
- In cases where LOCATE_TARGET isn't set, the vcx0.pdb files didn't get cleaned up.  This is now fixed and prettier than before.
- When calculating the absolute path from the relative path in OutputPath, handle the case where SUBDIR hasn't been set.
- Library accepts an option 'module'.  When specified on OS X, a bundle is created.  For other platforms, a module is created just like a normal shared library.
- New configuration 'releaseltcg', a Release build with Link Time Code Generation support.
- .idl support.
- Add regserver option to Library for shared libraries.  On Windows, regsvr32 is run during the build to automatically register the DLL with the system.  When cleaning, regsvr32 /u is run.
- Remove the .intermediate.manifest file on Clean for all configurations (not just Debug).
- CRuntimeType only worked for the * target.  Now it works for project targets, too.




<h3>Jam Modules:</h3>

- New CSharp Jam module: Adds rules CSharpAssembly, CSharpApplication, CSharpLibrary, CscDefines, CscFlags, ReferenceAssemblies, and ReferencePaths.
- DotNet module: Add VS2008 support.
- MFC Jam module: Add the atlmfc/ path to the resource compiler includes.
- Midl Jam module: New rules MidlFlags and MidlCompiler for building .idl files.


<h3>JamToWorkspace:</h3>

- Handle more than one workspace containing the same project.




<h3>Samples:</h3>

- Added a csharp-windowsforms sample which illustrates the new CSharp module.
- Updates to tests/compile_outputastree/ to make a Jamrules.jam with the ProjectSubDir rule in it.  The reasoning behind all this is described in a forum thread.
- tests/compile_outputastree/: Add libc project that globs files in a generic and platform-specific manner.  This illustrates another point from a forum thread.
- Add tests/dependency/more_than_one_target.jam.
- Add tests/manifest_generation/.  Provided by Chris Chapman.



<h3>VCProjToJamfile:</h3>

- SourceGroups weren't being written out correctly and didn't work when JamToWorkspace was run.



\section version0_2 Version 0.2

<h3>New features for 0.2:</h3>

- Visual Studio 2005 and 2008 solution and vcproj files.





<h3>Documentation:</h3>

- In some manner, every JamPlus feature is documented (we hope).




<h3>Jam Executable:</h3>

- Fixed a 'don't know how to make' bug when trying to create the subdirectory . (period)
- Fixed an MD5 network cache issue in filecache_fillvalues.  Reported by Jan van Valburg.
- Fixed the -T command line option which, in turn, fixed the -t command line option.
- Added the MightNotUpdate flag to work as a single target alternate to Needs.
- Fixed directory file pattern match for $(dir/:W).
- Fixed \ref language_variable_expansion "variable expansion" modifier issues when extra colons are present.
- Altered the way the :I= and :X= \ref language_variable_expansion "variable expansion" modifiers work to better fit the documentation.
- Addded the :T \ref language_variable_expansion "variable expansion" modifier to expand to the bound name.
- For the :W modifier, grab the files earlier in the \ref language_variable_expansion "variable expansion".
- Only compile a given regular expression once.  This existed in the original version of the header scanning code but not the HDRPIPE version.
- Optimized retrieval of directories from the timestamp() code.  This results in a very limited number of file queries for directories that cannot possibly exist.  See OPT_TIMESTAMP_EXTENDED_PARENT_CHECK_EXT.
- Fixed path delimiter in pathunix.c.
- Made \ref rule_UseMD5Callback "UseMD5Callback" a built-in rule, instead of having it sit in the Jambase.
- Removed the need to compile and link against the LuaPlus library when the Lua support was turned on.
- Added Subst rule, based on Lua's string.gsub.
- Added CppCompileOptions.
- Bug fix for multiple passes.
- Changed Lua multithreading to use Lua Lanes.






<h3>Jambase:</h3>

- Re-added basic MinGW support, accessible by setting the \c COMPILER variable to \c mingw.
- \ref rule_SubInclude "SubIncluding" a given Jamfile only happens once.
- Exits when an incorrect platform or configuration is specified.
- Added \ref rule_OutputPostfix "OutputPostfix", \ref rule_OutputPostfixClear "OutputPostfixClear", and \ref rule_OutputSuffix "OutputSuffix".
- For Visual Studio 2005, made the Microsoft .NET SDK include and library paths available.
- WINDOWS was not a side-by-side #define with WIN32.  Fixed.
- Attempt to load a Jamrules-style file called $(_top).jamrules.
- Fix import library dependencies for DLLs.
- Allow an additional optional \ref rule_SubDir "SubDir" parameter denoting a 'target' in the grist.  LOCATE_SOURCE, LOCATE_TARGET, and SOURCE_GRIST all append it.
- \ref rule_IncludeModule "IncludeModule": Modules can only be included once.
- Added \ref rule_ReferenceDirectories "ReferenceDirectories" for .NET references.
- Added \ref rule_BatchCompileGroupSize "BatchCompileGroupSize".  The default batch compilation group size is unlimited.
- Fixed precompiled header support to allow precompiled header .cpp files with relative paths attached to the name.  Uses the \ref built_in_variables_binding_binding_search_locate "BINDING" to control the output location.
- Assign \c LINK_TARGET variable to the \c TARGET when setting up an executable or shared library link, so later post-build steps can get access to the binary without a complex look up.
- \ref rule_Library "Library's" \c OPTIONS now accepts 'noexportlib'.
- Re-added \ref rule_ObjectCFlags "ObjectCFlags" and \ref rule_ObjectC++Flags "ObjectC++Flags".
- Added \c rule_FGristDirectories "FGristDirectories" rule.
- \ref rule_Lump "Lump" rule handles .cxx.
- \ref rule_PrecompiledHeader "PrecompiledHeader" rule accepts a shortened version where the .cpp and .h are determined by a single parameter.
- Optimization - Don't scan inside .lib files, since the .obj files are present by default.
- Major C/C++ compilation optimizations.
- Fix support for .c precompiled headers.
- Add \ref rule_CRuntimeType "CRuntimeType" to change between statically linked and dynamically linked C runtimes for Visual C++.
- Remove VC5 support, since I have no way of testing it.
- Change grists to be project level and not subdirectory level.
- LINKDIRECTORIES was set up wrong and put in the global variable list.  This is corrected now, and the initial LINKDIRECTORIES is assigned to *.
- Moved \c DEFINES down with the platform they represent.
- Change <dir> grist to <!dir!>.
- Minor clean up for calculation of \c MSVCNT and \c MSVCNT_PATH.
- Moved the \c MSVCNT_PATH first in the \c PATH.
- Get rid of top-level dependencies that don't mean anything.
- Removed unused script and targets.
- Quote C/C++ files on the command line for Visual C++.
- Handle separate C/C++ compilation.
- LinkPrebuiltLibraries does not append an extension if an extension already exists.




<h3>Jam Modules:</h3>

- MFC module: Removed automatic ATL and MFC include and library paths.  \ref rule_IncludeModule "IncludeModule" \c MFC to access the paths and apply ATL/MFC support to a target.
- DirectX module: Removed automatic DirectX include and library paths and added DirectX module.  \ref rule_IncludeModule "IncludeModule" \c DirectX to apply DirectX support to a target.
- wxWidgets module: Minor fix when generating the target name.
- wxWidgets module: Added contrib libraries support.  Only supports stc for now.
- DotNet module: Add \c StrongName rule.
- CopyDirectory and CopyFile modules: When generating a workspace that uses \ref rule_CopyDirectory "CopyDirectory" and \ref rule_CopyFile "CopyFile", files would get copied.  Both rules now guard against that during workspace generation.





<h3>JamToWorkspace:</h3>

- For the source Jamfile path, handle the case where Jamfile.jam is not specified.
- When a project is specified as existing in a workspace but has not been defined, pop up an error message instead of crashing.
- Handle quotes inside the preprocessor #defines.
- Fix JamToWorkspace conversion when the target name is implicit and specified through ActiveProject.




<h3>Samples:</h3>

- Make the batch maxtargets sample a little more clear.
- helloworld test that is slightly more complicated than the helloworld sample app.
- Add md5test.jam in tests/md5/.
- Add tests/expand/expandtests.jam.
- Very simple generatedheader test added.
- tests/source_and_jamfiles_separate example added.
- Batch file in samples/sharedlib/ to create a CodeBlocks MinGW project.
- Fixed up the sharedlib/ sample to work better multiplatform.
- Lua parsing phase examples in tests/lua/testluaparser.jam and tests/lua/testluaparser.jam.lua
- Added tutorial 02-helloworld-static.
- Useful output in the filecache_luamd5callback test.
- tests/compile_outputastree/ - Fix obj/ output location.
- Add .fx compilation sample.




<hr>
\section version0_1 Version 0.1

- Initial release.

*/
