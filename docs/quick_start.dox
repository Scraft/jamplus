/*! \page quick_start Quick Start Guide

\section quick_start_overview Overview

JamPlus works out of the box with Visual C++.  There is limited MinGW support.  Other compiler suites are to come.

JamPlus generates workspaces for Visual Studio 2003, 2005, and 2008.  It can also generate workspaces for CodeBlocks.

When the Jam executable is run, it reads a file called <tt>Jamfile.jam</tt> in the current working directory.  The Jamfile contains a description of how to build the current project.  In the tutorials below, we'll talk about how to properly set up a Jamfile build description.



<hr>
\section quick_start_01 Tutorial 1: Hello World!

\subsection quick_start_01_setup Initial Setup

For this tutorial, we are going to make a basic \b helloworld application.  You will find the source code presented below in the <tt>samples/tutorials/01-helloworld/</tt> directory in the JamPlus source distribution.

First, we need to create a basic <tt>main.c</tt>.  It will do nothing more than print <b>Hello, world!</b> to the user.

\code
/* main.c */
#include <stdio.h>

int main()
{
    printf("Hello, world!\n");
    return 0;
}
\endcode

In the same directory as <tt>main.c</tt>, we need to create <tt>Jamfile.jam</tt> with the description of how to build the basic \b helloworld application.

\code
# This file is Jamfile.jam.
SubDir TOP ;

Application helloworld : main.c ;
\endcode

\subsection quick_start_01_setup Compiling the Tutorial

Compiling the \b helloworld application is simple.  Assuming the Jam executable is in your \c PATH, run the following from the <tt>01-helloworld</tt> tutorial directory:

\code
[c:\jamplus\samples\tutorials\01-helloworld]jam
\endcode

That's it.  Jam will detect your Visual Studio installation automatically and build the \b helloworld application's Debug configuration.  The resultant filename will be <tt>helloworld.debug.exe</tt>.

Building the \b helloworld application Release configuration is performed with a command line flag.  In this case, the built executable will be <tt>helloworld.release.exe</tt>.

\code
[c:\jamplus\samples\tutorials\01-helloworld]jam -sCONFIG=release
\endcode

This is all well and good if you have one of the Visual Studio compilers, but if you are running with, say, MinGW, an additional command line flag must be provided.  MinGW is searched for in the <tt>c:/mingw/</tt> and <tt>d:/mingw/</tt> directories.

\code
[c:\jamplus\samples\tutorials\01-helloworld]jam -sCOMPILER=mingw
\endcode



\subsection quick_start_01_clean Cleaning Up the Tutorial Files

After a build, you may notice there are a number of extra files in the directory that weren't there before.  These are generally compiler intermediates, and we'll soon learn how to redirect them elsewhere.

For now, instead of leaving behind various junk files, Jam can clean up after itself using the \b clean target.  Targets on the Jam command line are specified \i after the command line flags.  Various examples follow:

\code
rem Cleans the Debug build.
jam clean

rem Cleans the Debug build, too.
jam -sCONFIG=debug clean

rem Cleans the Release build, too.
jam -sCONFIG=release clean
\endcode




\subsection quick_start_01_workspace Building a Visual Studio Workspace

One of the exciting aspects of JamPlus is its ability to build Visual Studio workspaces (solutions).  It does so with a set of scripts that ship in the JamPlus binary package.  These scripts create an out-of-source build tree optimized for best performance within JamPlus.  By being out-of-source, the source tree remains pristine.

For the \b helloworld application, let's build a Visual Studio 2005 solution using the script \b JamToWorkspace.

\code
c:\jamplus\bin\scripts\JamToWorkspace --gen=vs2005 Jamfile.jam build
\endcode

In just a quick moment, the new out-of-source work area will have been created.  Inside the generated <tt>01-helloworld/build/</tt> directory, you'll find a <tt>helloworld.sln</tt>.  Open this file in Visual Studio to proceed.

When Visual Studio has loaded the <tt>helloworld.sln</tt>, you'll find it contains the \b helloworld project within the Solution Explorer.  If the \b helloworld project is not already the active project, right click on it and choose <b>Set as StartUp Project</b>.

At this point, build as you normally would.  Change between the Debug and Release configurations if you'd like.  In fact, you can even debug as if the project were manually created!

*/
